# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2022-06-17T17:15:44+00:00
from __future__ import annotations

from datetime import date
from datetime import datetime
from enum import Enum
from typing import Any
from typing import Dict
from typing import List
from typing import Optional
from typing import Union
from uuid import UUID

from pydantic import AnyUrl
from pydantic import BaseModel
from pydantic import EmailStr
from pydantic import Field


class Distribution(Enum):
    memory = "memory"
    cpu = "cpu"


class Source(BaseModel):
    uuid: str | None = Field(None, example="e5ff62e7-e6d6-5513-5532-45fe72792dae")
    name: str | None = Field(None, example="source")


class CostType(BaseModel):
    code: str
    name: str
    description: str


class Currencies(BaseModel):
    code: str
    symbol: str
    name: str
    description: str


class Customer(BaseModel):
    account_id: str = Field(..., example="11838292")


class CustomerOut(Customer):
    uuid: UUID = Field(..., example="600562e7-d7d7-4516-8522-410e72792daf")
    date_created: datetime


class Error(BaseModel):
    errors: list[dict[str, Any]]


class DependencyError(Error):
    pass


class ForecastDataValueNumber(BaseModel):
    value: float | None = Field(None, description="A value.", example=123.456789)
    units: str | None = Field(None, description="The value's units.", example="USD")


class ForecastDataValueString(BaseModel):
    value: str | None = Field(None, description="A value.", example="123.456789")
    units: str | None = Field(None, description="The value's units.", example="USD")


class Infrastructure(BaseModel):
    total: ForecastDataValueNumber | None = Field(None, description="The forecast Y-value.")
    confidence_max: ForecastDataValueNumber | None = Field(
        None, description="The forecast confidence interval's upper-bound."
    )
    confidence_min: ForecastDataValueNumber | None = Field(
        None, description="The forecast confidence interval's lower-bound."
    )
    rsquared: ForecastDataValueString | None = Field(
        None, description="The forecast's R-squared value."
    )
    pvalues: ForecastDataValueString | None = Field(
        None, description="The forecast's p-test values."
    )


class Supplementary(Infrastructure):
    pass


class Costs(Infrastructure):
    pass


class Values(BaseModel):
    date: date | None = Field(
        None, description="Future date for this forecast Y-value.", example="2000-01-01"
    )
    infrastructure: Infrastructure | None = None
    supplementary: Supplementary | None = None
    costs: Costs | None = None


class Datum(BaseModel):
    date: date | None = Field(
        None, description="Future date for this forecast Y-value.", example="2000-01-01"
    )
    values: list[dict[str, Any]] | Values | None = None


class ForecastData(BaseModel):
    data: list[Datum]


class Unit(Enum):
    percent = "percent"


class Markup(BaseModel):
    value: float | None = None
    unit: Unit | None = None


class PaginationMeta(BaseModel):
    count: int | None = Field(None, example=30)


class PaginationLinks(BaseModel):
    first: AnyUrl | None = Field(None, example="/cost-management/v1/(resources)/?offset=0")
    previous: AnyUrl | None = Field(None, example="/cost-management/v1/(resources)/?offset=20")
    next: AnyUrl | None = Field(None, example="/cost-management/v1/(resources)/?offset=40")
    last: AnyUrl | None = Field(None, example="/cost-management/v1/(resources)/?offset=100")


class ListPagination(BaseModel):
    meta: PaginationMeta | None = None
    links: PaginationLinks | None = None


class MetricsOut(BaseModel):
    source_type: str
    metric: str
    label_metric: str
    label_measurement: str
    label_measurement_unit: str
    default_cost_type: str


class Organization(BaseModel):
    org_unit_id: str = Field(..., example="OU_003")
    org_unit_name: str | None = Field(None, example="Dept OU_003")
    org_unit_path: str = Field(..., example="R_001&OU_002&OU_003")
    level: int = Field(..., example=2)
    sub_orgs: list[str] = Field(
        ...,
        description="the list of sub orgs under the org",
        example=["OU_004", "OU_005"],
    )
    accounts: list[str] = Field(
        ..., description="the list of accounts under the org", example=["account 003"]
    )


class OrganizationPagination(ListPagination):
    data: list[Organization]


class ResourceTypeOut(BaseModel):
    value: str | None = None


class UserAccessTypeOut(BaseModel):
    type: str | None = None
    access: bool | None = None


class ResourceTypeListOut(BaseModel):
    value: str | None = None
    path: str | None = None
    count: int | None = None


class Source1(BaseModel):
    id: int = Field(..., example="Platform source identifier")
    source_type: str = Field(..., example="AWS")


class SourceIn(Source1):
    authentication: dict[str, Any] = Field(
        ...,
        description="Dictionary containing resource name.",
        example={"resource_name": "arn"},
    )
    billing_source: dict[str, Any] = Field(
        ...,
        description="Dictionary containing billing source.",
        example={"bucket": "test-bucket"},
    )


class CostModel1(BaseModel):
    uuid: UUID | None = Field(None, example="D823A725-DC10-496A-AF08-12533E4F8FE4")
    name: str | None = Field(None, example="My Great Cost Model")


class SourceOut(Source1):
    id: int = Field(..., example=1)
    uuid: UUID | None = Field(None, example="57e60f90-8c0c-4bd1-87a0-2143759aae1d")
    name: str | None = Field(None, example="My Source")
    source_type: str | None = Field(None, example="OCP")
    authentication: dict[str, Any] | None = Field(
        None,
        description="Dictionary containing resource name.",
        example={"resource_name": "arn"},
    )
    billing_source: dict[str, Any] | None = Field(
        None,
        description="Dictionary containing billing source.",
        example={"bucket": "test-bucket"},
    )
    provider_linked: bool | None = Field(
        False, description="Flag to indicate if provider is linked to source."
    )
    active: bool | None = Field(
        False, description="Flag to indicate if provider is successfully configured."
    )
    paused: bool | None = Field(False, description="Flag to indicate if provider is paused.")
    current_month_data: bool | None = Field(
        False,
        description="Flag to indicate if provider has report data for the current month.",
    )
    previous_month_data: bool | None = Field(
        False,
        description="Flag to indicate if provider has report data for the previous month.",
    )
    has_data: bool | None = Field(
        False, description="Flag to indicate if provider has report data for any month."
    )
    infrastructure: dict[str, Any] | None = Field(
        None,
        description="Dictionary containing OpenShift foundational infrastructure type and uuid.",
        example={"type": "AWS", "uuid": "57e60f90-8c0c-4bd1-87a0-2143759aae1d"},
    )
    cost_models: list[CostModel1] | None = Field(
        None,
        description="List of cost model name and UUIDs associated with this source.",
    )
    additional_context: dict[str, Any] | None = Field(
        None,
        description="Dictionary containing OpenShift foundational infrastructure type and uuid.",
        example={"crawl_heirarchy": "False"},
    )


class SourcePagination(ListPagination):
    data: list[SourceOut]


class CostType1(Enum):
    Infrastructure = "Infrastructure"
    Supplementary = "Supplementary"


class Unit1(Enum):
    USD = "USD"


class TieredRate1(BaseModel):
    value: float | None = None
    usage: dict[str, Any] | None = None
    unit: Unit1 | None = None


class TieredRate(BaseModel):
    uuid: UUID | None = Field(None, example="83ee048e-3c1d-43ef-b945-108225ae52f4")
    metric: dict[str, Any] = Field(
        ...,
        example={
            "name": "cpu_core_per_hour",
            "unit": "core-hours",
            "display_name": "Compute usage Rate",
        },
    )
    cost_type: CostType1 | None = Field(None, alias="cost-type")
    description: str | None = Field(None, example="Rate description")
    tiered_rates: list[TieredRate1] | None = Field(
        None,
        example=[{"value": 0.22, "unit": "USD", "usage": {"usage_start": 0, "usage_end": 10}}],
    )


class TagKey(Enum):
    key_one = "key_one"


class TagValue(BaseModel):
    tag_value: str | None = None
    usage: dict[str, Any] | None = None
    unit: Unit1 | None = None
    value: str | None = None
    description: str | None = None
    default: bool | None = None


class TagRates(BaseModel):
    tag_key: TagKey
    tag_values: list[TagValue] | None = Field(
        None,
        example=[
            {
                "tag_value": "dev",
                "unit": "USD",
                "usage": {"unit": "USD", "usage_start": 0, "usage_end": 10},
                "value": 0.2,
                "description": "Developers",
                "default": True,
            }
        ],
    )


class TagRate(BaseModel):
    uuid: UUID | None = Field(None, example="83ee048e-3c1d-43ef-b945-108225ae52f4")
    metric: dict[str, Any] = Field(
        ...,
        example={
            "name": "cpu_core_per_hour",
            "unit": "core-hours",
            "display_name": "Compute usage Rate",
        },
    )
    cost_type: CostType1 | None = Field(None, alias="cost-type")
    description: str | None = Field(None, example="Rate description")
    tag_rates: TagRates | None = None


class ReportAzureGrouping(BaseModel):
    subscription_guid: list[str] | None = None
    service_name: list[str] | None = None
    resource_location: list[str] | None = None
    instance_type: list[str] | None = None
    tag: list[str] | None = None


class ReportOpenShiftGrouping(BaseModel):
    cluster: list[str] | None = None
    project: list[str] | None = None
    node: list[str] | None = None
    tag: list[str] | None = None


class ReportOpenShiftAWSGrouping(BaseModel):
    account: list[str] | None = None
    service: list[str] | None = None
    region: list[str] | None = None
    az: list[str] | None = None
    instance_type: list[str] | None = None
    storage_type: list[str] | None = None
    tag: list[str] | None = None
    cluster: list[str] | None = None
    project: list[str] | None = None
    node: list[str] | None = None


class ReportOpenShiftAzureGrouping(BaseModel):
    subscription_guid: list[str] | None = None
    service_name: list[str] | None = None
    resource_location: list[str] | None = None
    instance_type: list[str] | None = None
    tag: list[str] | None = None
    cluster: list[str] | None = None
    project: list[str] | None = None
    node: list[str] | None = None


class Infrastructure1(Enum):
    asc = "asc"
    desc = "desc"


class ReportOrdering(BaseModel):
    infrastructure: Infrastructure1 | None = None
    supplementary: Infrastructure1 | None = None
    cost: Infrastructure1 | None = None
    usage: Infrastructure1 | None = None
    delta: Infrastructure1 | None = None
    account_alias: Infrastructure1 | None = None
    region: Infrastructure1 | None = None
    service: Infrastructure1 | None = None


class ReportAzureOrdering(BaseModel):
    infrastructure: Infrastructure1 | None = None
    supplementary: Infrastructure1 | None = None
    cost: Infrastructure1 | None = None
    usage: Infrastructure1 | None = None
    delta: Infrastructure1 | None = None
    subscription_guid: Infrastructure1 | None = None
    resource_location: Infrastructure1 | None = None
    service_name: Infrastructure1 | None = None
    instance_type: Infrastructure1 | None = None


class ReportInventoryOpenShiftOrdering(BaseModel):
    cluster: Infrastructure1 | None = None
    project: Infrastructure1 | None = None
    node: Infrastructure1 | None = None
    usage: Infrastructure1 | None = None
    request: Infrastructure1 | None = None
    infrastructure: Infrastructure1 | None = None
    supplementary: Infrastructure1 | None = None
    cost: Infrastructure1 | None = None
    limit: Infrastructure1 | None = None


class ReportCostsOpenShiftOrdering(BaseModel):
    cluster: Infrastructure1 | None = None
    project: Infrastructure1 | None = None
    node: Infrastructure1 | None = None
    infrastructure: Infrastructure1 | None = None
    supplementary: Infrastructure1 | None = None
    cost: Infrastructure1 | None = None


class ReportOpenShiftAWSOrdering(BaseModel):
    infrastructure: Infrastructure1 | None = None
    supplementary: Infrastructure1 | None = None
    cost: Infrastructure1 | None = None
    usage: Infrastructure1 | None = None
    delta: Infrastructure1 | None = None
    account_alias: Infrastructure1 | None = None
    region: Infrastructure1 | None = None
    service: Infrastructure1 | None = None
    cluster: Infrastructure1 | None = None
    project: Infrastructure1 | None = None
    node: Infrastructure1 | None = None


class ReportOpenShiftAzureOrdering(BaseModel):
    infrastructure: Infrastructure1 | None = None
    supplementary: Infrastructure1 | None = None
    cost: Infrastructure1 | None = None
    usage: Infrastructure1 | None = None
    delta: Infrastructure1 | None = None
    subscription_guid: Infrastructure1 | None = None
    resource_location: Infrastructure1 | None = None
    service_name: Infrastructure1 | None = None
    instance_type: Infrastructure1 | None = None
    cluster: Infrastructure1 | None = None
    project: Infrastructure1 | None = None
    node: Infrastructure1 | None = None


class OrgUnitId(BaseModel):
    __root__: str = Field(..., example="R_001")


class ReportDelta(BaseModel):
    delta: str | None = None


class ReportResolution(Enum):
    daily = "daily"
    monthly = "monthly"


class ReportTimeScopeUnits(Enum):
    day = "day"
    month = "month"


class ReportTimeScopeValue(Enum):
    integer__1 = -1
    integer__2 = -2
    integer__10 = -10
    integer__30 = -30


class ReportResourceScope(Enum):
    EC2 = "EC2"
    EBS = "EBS"
    EFS = "EFS"
    S3 = "S3"


class SettingIn(BaseModel):
    api: dict[str, Any] = Field(
        ...,
        example={"settings": {"openshift": {"tag-management": {"enabled": ["tag_key1"]}}}},
    )


class SettingOut(BaseModel):
    fields: list[dict[str, Any]] | None = None
    name: str | None = None
    component: str | None = None


class Status(BaseModel):
    api_version: int = Field(..., example=1)
    commit: str | None = Field(None, example="178d2ea")
    server_address: str | None = Field(None, example="127.0.0.1:8000")
    rbac_cache_ttl: int | None = Field(None, example="30")
    platform_info: dict[str, Any] | None = Field(
        None,
        example={
            "system": "Darwin",
            "node": "node-1.example.com",
            "release": "17.5.0",
            "version": "Darwin Kernel Version 17.5.0",
            "machine": "x86_64",
            "processor": "i386",
        },
    )
    python_version: str | None = Field(None, example="3.6.1")
    modules: dict[str, Any] | None = Field(
        None,
        example={
            "coverage": "4.5.1",
            "coverage.version": "4.5.1",
            "coverage.xmlreport": "4.5.1",
            "cryptography": "2.0.3",
            "ctypes": "1.1.0",
            "ctypes.macholib": "1.0",
            "decimal": "1.70",
            "django": "1.11.5",
            "django.utils.six": "1.10.0",
            "django_filters": "1.0.4",
            "http.server": "0.6",
        },
    )
    config: dict[str, Any] | None = Field(
        None, example={"debug": True, "account_access_type": "db"}
    )


class TagsFilter(BaseModel):
    resolution: ReportResolution | None = None
    time_scope_value: ReportTimeScopeValue | None = None
    time_scope_units: ReportTimeScopeUnits | None = None


class Cluster4(BaseModel):
    __root__: str = Field(
        ...,
        description="The cluster_id or cluster_alias to filter on",
        example="my-ocp-cluster",
    )


class Tags(BaseModel):
    filter: TagsFilter | None = None
    data: list | None = Field(None, example=["production", "staging", "test"])


class User(BaseModel):
    username: str = Field(..., example="smithj")
    email: EmailStr = Field(..., example="smithj@mytechco.com")


class UserOut(User):
    uuid: UUID = Field(..., example="57e60f90-8c0c-4bd1-87a0-2143759aae1c")


class UserSettings(BaseModel):
    currency: str | None = None
    cost_type: str | None = None


class UserSetting(BaseModel):
    setting: str | None = None


class CostModel(BaseModel):
    name: str
    description: str
    currency: str | None = None
    source_type: str
    source_uuids: list[str] | None = None
    rates: list[TieredRate | TagRate] | None = None
    markup: Markup | None = None
    distribution: Distribution | None = None


class CostModelResp(BaseModel):
    name: str
    description: str
    currency: str | None = None
    source_type: str
    sources: list[Source] | None = None
    rates: list[TieredRate | TagRate] | None = None
    distribution: Distribution | None = None


class CostModelOut(CostModelResp):
    uuid: UUID | None = None
    created_timestamp: datetime | None = None
    updated_timestamp: datetime | None = None
    markup: Markup | None = None


class CostModelPagination(ListPagination):
    data: list[CostModelOut]


class CostTypePagination(ListPagination):
    data: list[CostType]


class Currency(ListPagination):
    data: list[Currencies]


class Forecast(ListPagination):
    data: list[ForecastData]


class Metrics(ListPagination):
    data: list[MetricsOut]


class OrganizationFilter(BaseModel):
    resolution: ReportResolution | None = None
    time_scope_value: ReportTimeScopeValue | None = None
    time_scope_units: ReportTimeScopeUnits | None = None
    org_unit_id: OrgUnitId | None = None


class UserAccessListPagination(ListPagination):
    data: list[UserAccessTypeOut]


class ResourceTypeListPagination(ListPagination):
    data: list[ResourceTypeListOut]


class ResourceTypePagination(ListPagination):
    data: list[ResourceTypeOut]


class ReportFilter(BaseModel):
    limit: int | None = Field(
        None,
        description="Limits the data points returns and aggregates remaining data.",
        example=5,
    )
    offset: int | None = Field(
        None,
        description="Offsets the data points returned when using limit.",
        example=5,
    )
    resolution: ReportResolution | None = None
    time_scope_value: ReportTimeScopeValue | None = None
    time_scope_units: ReportTimeScopeUnits | None = None
    resource_scope: list[ReportResourceScope] | None = Field(None, example=[])
    account: list[str] | None = None
    service: list[str] | None = None
    region: list[str] | None = None
    az: list[str] | None = None
    tag: list[str] | None = None
    org_unit_id: OrgUnitId | None = None


class ReportAzureFilter(BaseModel):
    limit: int | None = Field(
        None,
        description="Limits the data points returns and aggregates remaining data.",
        example=5,
    )
    offset: int | None = Field(
        None,
        description="Offsets the data points returned when using limit.",
        example=5,
    )
    resolution: ReportResolution | None = None
    time_scope_value: ReportTimeScopeValue | None = None
    time_scope_units: ReportTimeScopeUnits | None = None
    resource_scope: list[ReportResourceScope] | None = Field(None, example=[])
    subscription_guid: list[str] | None = None
    service_name: list[str] | None = None
    resource_location: list[str] | None = None
    instance_type: list[str] | None = None
    tag: list[str] | None = None


class ReportOpenShiftFilter(BaseModel):
    limit: int | None = Field(
        None,
        description="Limits the data points returns and aggregates remaining data.",
        example=5,
    )
    offset: int | None = Field(
        None,
        description="Offsets the data points returned when using limit.",
        example=5,
    )
    resolution: ReportResolution | None = None
    time_scope_value: ReportTimeScopeValue | None = None
    time_scope_units: ReportTimeScopeUnits | None = None
    resource_scope: list[ReportResourceScope] | None = Field(None, example=[])
    project: list[str] | None = None
    cluster: list[str] | None = None
    pod: list[str] | None = None
    node: list[str] | None = None
    tag: list[str] | None = None
    infrastructures: list[str] | None = None


class ReportOpenShiftAWSFilter(BaseModel):
    limit: int | None = Field(
        None,
        description="Limits the data points returns and aggregates remaining data.",
        example=5,
    )
    offset: int | None = Field(
        None,
        description="Offsets the data points returned when using limit.",
        example=5,
    )
    resolution: ReportResolution | None = None
    time_scope_value: ReportTimeScopeValue | None = None
    time_scope_units: ReportTimeScopeUnits | None = None
    resource_scope: list[ReportResourceScope] | None = Field(None, example=[])
    account: list[str] | None = None
    service: list[str] | None = None
    region: list[str] | None = None
    az: list[str] | None = None
    tag: list[str] | None = None
    project: list[str] | None = None
    cluster: list[str] | None = None
    node: list[str] | None = None


class ReportOpenShiftAzureFilter(BaseModel):
    limit: int | None = Field(
        None,
        description="Limits the data points returns and aggregates remaining data.",
        example=5,
    )
    offset: int | None = Field(
        None,
        description="Offsets the data points returned when using limit.",
        example=5,
    )
    resolution: ReportResolution | None = None
    time_scope_value: ReportTimeScopeValue | None = None
    time_scope_units: ReportTimeScopeUnits | None = None
    resource_scope: list[ReportResourceScope] | None = Field(None, example=[])
    subscription_guid: list[str] | None = None
    service_name: list[str] | None = None
    resource_location: list[str] | None = None
    instance_type: list[str] | None = None
    tag: list[str] | None = None
    project: list[str] | None = None
    cluster: list[str] | None = None
    node: list[str] | None = None


class ReportGrouping(BaseModel):
    account: list[str] | None = None
    service: list[str] | None = None
    region: list[str] | None = None
    az: list[str] | None = None
    instance_type: list[str] | None = None
    storage_type: list[str] | None = None
    tag: list[str] | None = None
    org_unit_id: OrgUnitId | None = None


class ReportPaginationMeta(BaseModel):
    count: int | None = Field(None, example=30)
    delta: ReportDelta | None = None
    group_by: None | (
        ReportGrouping
        | ReportAzureGrouping
        | ReportOpenShiftGrouping
        | ReportOpenShiftAWSGrouping
        | ReportOpenShiftAzureGrouping
    ) = None
    order_by: None | (
        ReportOrdering
        | ReportAzureOrdering
        | ReportCostsOpenShiftOrdering
        | ReportInventoryOpenShiftOrdering
        | ReportOpenShiftAWSOrdering
        | ReportOpenShiftAzureOrdering
    ) = None
    filter: None | (
        ReportFilter
        | ReportAzureFilter
        | ReportOpenShiftFilter
        | ReportOpenShiftAWSFilter
        | ReportOpenShiftAzureFilter
    ) = None
    units: str | None = Field(None, description="The units for the output data.", example="")


class Report(BaseModel):
    meta: ReportPaginationMeta | None = None
    links: PaginationLinks | None = None


class ReportCost(Report):
    data: list[dict[str, Any]]


class ReportCosts(ReportCost):
    pass


class ReportInstanceInventory(ReportCost):
    pass


class ReportStorageInventory(ReportCost):
    pass


class ReportOpenShiftAWSStorageInventory(Report):
    group_by: ReportOpenShiftAWSGrouping | None = None
    order_by: ReportOpenShiftAWSOrdering | None = None
    filter: ReportOpenShiftAWSFilter | None = None
    data: list[dict[str, Any]]


class ReportOpenShiftAWSInstanceInventory(ReportOpenShiftAWSStorageInventory):
    pass


class ReportOpenShiftAllStorageInventory(ReportOpenShiftAWSStorageInventory):
    pass


class ReportOpenShiftAllInstanceInventory(ReportOpenShiftAWSInstanceInventory):
    pass


class ReportOpenShiftAzureStorageInventory(Report):
    group_by: ReportOpenShiftAzureGrouping | None = None
    order_by: ReportOpenShiftAzureOrdering | None = None
    filter: ReportOpenShiftAzureFilter | None = None
    data: list[dict[str, Any]]


class ReportOpenShiftAzureInstanceInventory(ReportOpenShiftAzureStorageInventory):
    pass


class ReportOpenShiftCpu(ReportCost):
    pass


class ReportOpenShiftMemory(ReportCost):
    pass


class ReportOpenShiftVolume(ReportCost):
    pass
